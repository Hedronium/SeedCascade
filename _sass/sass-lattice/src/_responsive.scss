$breakpoints: $grid-responsive-breakpoints;
$len: length($breakpoints);
$aside: null;
$i: 1;

@function grid-strip-units($a) {
	@return ($a / ($a * 0 + 1));
}

@function unit-absolute-value($x) {
	$abs: grid-strip-units($x);

	@if unitless($x) {
		@return $abs;
	} @elseif unit($x) == 'px' {
		@return $abs * 1;
	} @elseif unit($x) == 'em' or unit($x) == 'rem' {
		@return $abs * 16;
	} @elseif unit($x) == 'in' {
		@return $abs * 96;
	} @elseif unit($x) == 'pt' {
		@return ($abs / 72) * 96;
	} @elseif unit($x) == 'pc' {
		@return ($abs / 72) * 96 * 12;
	} @elseif unit($x) == 'cm' {
		@return $abs * (96 / 2.54);
	} @elseif unit($x) == 'mm' {
		@return $abs * ((96 / 2.54) / 10);
	}
}

@while $i <= $len {
	$aside: nth($breakpoints, $i);

	$insert-at: 1;
	$j: $i - 1;

	@while $j > 0 {
		$comparing: nth($breakpoints, $j);

		@if unit-absolute-value(nth($comparing, 2)) > unit-absolute-value(nth($aside, 2)) {
			$insert-at: $j;
			$breakpoints: set-nth($breakpoints, ($j + 1), $comparing);
		}

		$j: $j - 1;
	}

	$breakpoints: set-nth($breakpoints, $insert-at, $aside);

	$i: $i + 1;
}

$grid-responsive-breakpoint-keys: map-keys($grid-responsive-breakpoints);

@function grid-resolve-breakpoint($point) {
	$a: null;

	@if type-of($point) == "string" {
		$a: map-get($grid-responsive-breakpoints, $point);

		@if not $a {
			@error "Breakpoint '#{$point}' is not defined.";
		}
	} @elseif not unitless($point) {
		$a: $point;
	}

	@return $a;
}

@mixin between($point-a, $point-b: false) {
	$a: grid-resolve-breakpoint($point-a);

	@if grid-strip-units($a) == 0 {
		@if $point-b == false {
			@content;
		} @else {
			$b: grid-resolve-breakpoint($point-b);

			@media (max-width: $b) {
				@content;
			}
		}
	} @elseif $point_b != false {
		$b: grid-resolve-breakpoint($point-b);

		@if unit-absolute-value($b) <= unit-absolute-value($a) {
			@error "Point-B must be larger than Point-A (#{$point-a}(B) > #{$point-b}(A))";
		}

		@media (min-width: $a) and (max-width: $b) {
			@content;
		}
	} @else {
		@media (min-width: $a) {
			@content;
		}
	}
}

@mixin at($point) {
	@include between($point) {
		@content;
	}
}

@mixin in($point) {
	@if type-of($point) != 'string' {
		@error "Point must be a string name.";
	}

	$keys: $grid-responsive-breakpoint-keys;
	$index: null;

	@for $i from 1 through length($breakpoints) {
		@if nth(nth($breakpoints, $i), 1) == $point {
			$index: $i;
		}
	}

	@if $index == null {
		@error "Breakpoint not defined.";
	}

	$b_index: $index + 1;

	@if $b_index > length($breakpoints) {
		@include at(nth(nth($breakpoints, $index), 1)) {
			@content;
		}
	} @else {
		@include between(nth(nth($breakpoints, $index), 1), nth(nth($breakpoints, $b_index), 1)) {
			@content;
		}
	}
}

@debug $breakpoints;

@mixin grid-generate-responsive-order {
	@if $grid-generate-responsive-order {
		$n: 1;

		@each $name, $width in $breakpoints {
			@include at($name) { @content; };

			@if $n != length($breakpoints) {
				@include in($name) { @content; };
			}

			$n: $n + 1;
		}
	}
}

@include grid-generate-responsive-order {
	x {
		a:b;
	}
}
